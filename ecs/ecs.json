{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Deploying ECS",
	"Parameters": {
		"DesiredCapacity": {
			"Type": "Number",
			"Default": "3",
			"Description": "Number of EC2 instances to launch in your ECS cluster."
		},
		"MaxSize": {
			"Type": "Number",
			"Default": "6",
			"Description": "Maximum number of EC2 instances that can be launched in your ECS cluster."
		},
		"ECSAMI": {
			"Description": "AMI ID",
			"Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
			"Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
		},
		"InstanceType": {
			"Description": "EC2 instance type",
			"Type": "String",
			"Default": "c4.xlarge",
			"AllowedValues": [
				"t2.micro",
				"t2.small",
				"t2.medium",
				"t2.large",
				"m3.medium",
				"m3.large",
				"m3.xlarge",
				"m3.2xlarge",
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge",
				"m4.10xlarge",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"c3.large",
				"c3.xlarge",
				"c3.2xlarge",
				"c3.4xlarge",
				"c3.8xlarge",
				"r3.large",
				"r3.xlarge",
				"r3.2xlarge",
				"r3.4xlarge",
				"r3.8xlarge",
				"i2.xlarge",
				"i2.2xlarge",
				"i2.4xlarge",
				"i2.8xlarge"
			],
			"ConstraintDescription": "Please choose a valid instance type."
		}
	},
	"Mappings": {
		"SubnetConfig": {
			"VPC": {
				"CIDR": "10.0.0.0/16"
			},
			"PublicOne": {
				"CIDR": "10.0.0.0/24"
			},
			"PublicTwo": {
				"CIDR": "10.0.1.0/24"
			}
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"EnableDnsSupport": true,
				"EnableDnsHostnames": true,
				"CidrBlock": null
			}
		},
		"PublicSubnetOne": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": [
						0,
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"VpcId": null,
				"CidrBlock": null,
				"MapPublicIpOnLaunch": true
			}
		},
		"PublicSubnetTwo": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": [
						1,
						{
							"Fn::GetAZs": {
								"Ref": "AWS::Region"
							}
						}
					]
				},
				"VpcId": null,
				"CidrBlock": null,
				"MapPublicIpOnLaunch": true
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway"
		},
		"GatewayAttachement": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": null,
				"InternetGatewayId": null
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": null
			}
		},
		"PublicRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "GatewayAttachement",
			"Properties": {
				"RouteTableId": null,
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": null
			}
		},
		"PublicSubnetOneRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": null,
				"RouteTableId": null
			}
		},
		"PublicSubnetTwoRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": null,
				"RouteTableId": null
			}
		},
		"ECSCluster": {
			"Type": "AWS::ECS::Cluster"
		},
		"EcsHostSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Access to the ECS hosts that run containers",
				"VpcId": null
			}
		},
		"EcsSecurityGroupIngressFromPublicALB": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"Description": "Ingress from the public ALB",
				"GroupId": null,
				"IpProtocol": -1,
				"SourceSecurityGroupId": null
			}
		},
		"EcsSecurityGroupIngressFromSelf": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"Description": "Ingress from other hosts in the same security group",
				"GroupId": null,
				"IpProtocol": -1,
				"SourceSecurityGroupId": null
			}
		},
		"ECSAutoScalingGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"VPCZoneIdentifier": [
					null,
					null
				],
				"LaunchConfigurationName": null,
				"MinSize": "1",
				"MaxSize": null,
				"DesiredCapacity": null
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT15M"
				}
			},
			"UpdatePolicy": {
				"AutoScalingReplacingUpdate": {
					"WillReplace": "true"
				}
			}
		},
		"ContainerInstances": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"ImageId": null,
				"SecurityGroups": [
					null
				],
				"InstanceType": null,
				"IamInstanceProfile": null,
				"UserData": {
					"Fn::Base64": null
				}
			}
		},
		"AutoscalingRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"application-autoscaling.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "service-autoscaling",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"application-autoscaling:*",
										"cloudwatch:DescribeAlarms",
										"cloudwatch:PutMetricAlarm",
										"ecs:DescribeServices",
										"ecs:UpdateService"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"EC2InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					null
				]
			}
		},
		"EC2Role": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "ecs-service",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ecs:CreateCluster",
										"ecs:DeregisterContainerInstance",
										"ecs:DiscoverPollEndpoint",
										"ecs:Poll",
										"ecs:RegisterContainerInstance",
										"ecs:StartTelemetrySession",
										"ecs:Submit*",
										"logs:CreateLogStream",
										"logs:PutLogEvents",
										"ecr:GetAuthorizationToken",
										"ecr:BatchGetImage",
										"ecr:GetDownloadUrlForLayer"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"PublicLoadBalancerSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Access to the public facing load balancer",
				"VpcId": null,
				"SecurityGroupIngress": [
					{
						"CidrIp": "0.0.0.0/0",
						"IpProtocol": -1
					}
				]
			}
		},
		"PublicLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Scheme": "internet-facing",
				"LoadBalancerAttributes": [
					{
						"Key": "idle_timeout.timeout_seconds",
						"Value": "30"
					}
				],
				"Subnets": [
					null,
					null
				],
				"SecurityGroups": [
					null
				]
			}
		},
		"DummyTargetGroupPublic": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckIntervalSeconds": 6,
				"HealthCheckPath": "/",
				"HealthCheckProtocol": "HTTP",
				"HealthCheckTimeoutSeconds": 5,
				"HealthyThresholdCount": 2,
				"Name": null,
				"Port": 80,
				"Protocol": "HTTP",
				"UnhealthyThresholdCount": 2,
				"VpcId": null
			}
		},
		"PublicLoadBalancerListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"DependsOn": [
				"PublicLoadBalancer"
			],
			"Properties": {
				"DefaultActions": [
					{
						"TargetGroupArn": null,
						"Type": "forward"
					}
				],
				"LoadBalancerArn": null,
				"Port": 80,
				"Protocol": "HTTP"
			}
		},
		"ECSRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ecs.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "ecs-service",
						"PolicyDocument": {
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ec2:AttachNetworkInterface",
										"ec2:CreateNetworkInterface",
										"ec2:CreateNetworkInterfacePermission",
										"ec2:DeleteNetworkInterface",
										"ec2:DeleteNetworkInterfacePermission",
										"ec2:Describe*",
										"ec2:DetachNetworkInterface",
										"elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
										"elasticloadbalancing:DeregisterTargets",
										"elasticloadbalancing:Describe*",
										"elasticloadbalancing:RegisterInstancesWithLoadBalancer",
										"elasticloadbalancing:RegisterTargets"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		}
	},
	"Outputs": {
		"ClusterName": {
			"Description": "The name of the ECS cluster",
			"Value": null,
			"Export": {
				"Name": null
			}
		},
		"ExternalUrl": {
			"Description": "The url of the external load balancer",
			"Value": null,
			"Export": {
				"Name": null
			}
		},
		"ECSRole": {
			"Description": "The ARN of the ECS role",
			"Value": null,
			"Export": {
				"Name": null
			}
		},
		"PublicListener": {
			"Description": "The ARN of the public load balancer's Listener",
			"Value": null,
			"Export": {
				"Name": null
			}
		},
		"VPCId": {
			"Description": "The ID of the VPC that this stack is deployed in",
			"Value": null,
			"Export": {
				"Name": null
			}
		},
		"PublicSubnetOne": {
			"Description": "Public subnet one",
			"Value": null,
			"Export": {
				"Name": null
			}
		},
		"PublicSubnetTwo": {
			"Description": "Public subnet two",
			"Value": null,
			"Export": {
				"Name": null
			}
		},
		"EcsHostSecurityGroup": {
			"Description": "A security group used to allow containers to receive traffic",
			"Value": null,
			"Export": {
				"Name": null
			}
		}
	}
}